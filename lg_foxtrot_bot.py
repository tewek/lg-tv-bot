import json
import requests
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# =================== –ü–∞—Ä—Å–∏–Ω–≥ –∑ Foxtrot =======================
def parse_lg_tvs():
    url = "https://www.foxtrot.com.ua/uk/shop/televizory-lg.html"
    headers = {"User-Agent": "Mozilla/5.0"}
    res = requests.get(url, headers=headers)
    soup = BeautifulSoup(res.text, "html.parser")

    items = soup.select(".card__body")
    tvs = {}

    for item in items:
        title_tag = item.select_one(".card__title")
        if not title_tag:
            continue

        name = title_tag.get_text(strip=True).lower()
        url = "https://www.foxtrot.com.ua" + title_tag.get("href")

        price_tag = item.select_one(".card__price-final")
        price = price_tag.get_text(strip=True) if price_tag else "–ù/–î"

        desc_tag = item.select_one(".card__description")
        desc = desc_tag.get_text(strip=True) if desc_tag else ""

        tvs[name] = {
            "–Ω–∞–∑–≤–∞": name.upper(),
            "–ø–æ—Å–∏–ª–∞–Ω–Ω—è": url,
            "—Ü—ñ–Ω–∞": price,
            "–æ–ø–∏—Å": desc
        }

    return tvs

# =============== Telegram Bot ============================

user_state = {}
cached_tvs = {}  # –ö–µ—à –¥–ª—è —à–≤–∏–¥–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –º–æ–¥–µ–ª—ñ LG", callback_data="search")],
        [InlineKeyboardButton("üì• –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", callback_data="refresh")]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç LG-TV –∑ Foxtrot üõí. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "search":
        user_state[user_id] = "awaiting_model"
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä–∞ LG (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 55UQ75006LF):")
    elif query.data == "refresh":
        global cached_tvs
        cached_tvs = parse_lg_tvs()
        await query.message.reply_text(f"üîÑ –ë–∞–∑—É –æ–Ω–æ–≤–ª–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ {len(cached_tvs)} –º–æ–¥–µ–ª–µ–π LG.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message.text.lower()

    if user_state.get(user_id) == "awaiting_model":
        user_state.pop(user_id)
        if not cached_tvs:
            cached_tvs.update(parse_lg_tvs())

        found = None
        for key, tv in cached_tvs.items():
            if message in key:
                found = tv
                break

        if found:
            text = (
                f"üì∫ <b>{found['–Ω–∞–∑–≤–∞']}</b>\n"
                f"üí∞ –¶—ñ–Ω–∞: {found['—Ü—ñ–Ω–∞']}\n"
                f"üìÑ –û–ø–∏—Å: {found['–æ–ø–∏—Å'] or '–ù–µ–º–∞—î'}\n"
                f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–æ–≤–∞—Ä—É]({found['–ø–æ—Å–∏–ª–∞–Ω–Ω—è']})"
            )
            await update.message.reply_html(text, disable_web_page_preview=False)
        else:
            await update.message.reply_text("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    else:
        await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.")

def main():
    import os
TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()

if __name__ == "__main__":
    main()
